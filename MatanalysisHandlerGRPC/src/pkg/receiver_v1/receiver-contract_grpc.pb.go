// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/receiver/receiver-contract.proto

package receiver_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadSequence_Load_FullMethodName = "/receiver.LoadSequence/Load"
)

// LoadSequenceClient is the client API for LoadSequence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadSequenceClient interface {
	Load(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SequenceRequest, VoidResponse], error)
}

type loadSequenceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadSequenceClient(cc grpc.ClientConnInterface) LoadSequenceClient {
	return &loadSequenceClient{cc}
}

func (c *loadSequenceClient) Load(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SequenceRequest, VoidResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LoadSequence_ServiceDesc.Streams[0], LoadSequence_Load_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SequenceRequest, VoidResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LoadSequence_LoadClient = grpc.ClientStreamingClient[SequenceRequest, VoidResponse]

// LoadSequenceServer is the server API for LoadSequence service.
// All implementations must embed UnimplementedLoadSequenceServer
// for forward compatibility.
type LoadSequenceServer interface {
	Load(grpc.ClientStreamingServer[SequenceRequest, VoidResponse]) error
	mustEmbedUnimplementedLoadSequenceServer()
}

// UnimplementedLoadSequenceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadSequenceServer struct{}

func (UnimplementedLoadSequenceServer) Load(grpc.ClientStreamingServer[SequenceRequest, VoidResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedLoadSequenceServer) mustEmbedUnimplementedLoadSequenceServer() {}
func (UnimplementedLoadSequenceServer) testEmbeddedByValue()                      {}

// UnsafeLoadSequenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadSequenceServer will
// result in compilation errors.
type UnsafeLoadSequenceServer interface {
	mustEmbedUnimplementedLoadSequenceServer()
}

func RegisterLoadSequenceServer(s grpc.ServiceRegistrar, srv LoadSequenceServer) {
	// If the following call pancis, it indicates UnimplementedLoadSequenceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadSequence_ServiceDesc, srv)
}

func _LoadSequence_Load_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoadSequenceServer).Load(&grpc.GenericServerStream[SequenceRequest, VoidResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LoadSequence_LoadServer = grpc.ClientStreamingServer[SequenceRequest, VoidResponse]

// LoadSequence_ServiceDesc is the grpc.ServiceDesc for LoadSequence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadSequence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receiver.LoadSequence",
	HandlerType: (*LoadSequenceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Load",
			Handler:       _LoadSequence_Load_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/receiver/receiver-contract.proto",
}
